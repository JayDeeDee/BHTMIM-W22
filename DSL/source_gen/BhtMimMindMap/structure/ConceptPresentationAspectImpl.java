package BhtMimMindMap.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_BHTMainTopic;
  private ConceptPresentation props_BHTMarker;
  private ConceptPresentation props_BHTMindMap;
  private ConceptPresentation props_BHTRootTopic;
  private ConceptPresentation props_BHTSubTopic;
  private ConceptPresentation props_BHTTopic;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.BHTMainTopic:
        if (props_BHTMainTopic == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("many main topics can be children of the central root topic");
          cpb.presentationByName();
          props_BHTMainTopic = cpb.create();
        }
        return props_BHTMainTopic;
      case LanguageConceptSwitch.BHTMarker:
        if (props_BHTMarker == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("potential marker for each topic");
          cpb.presentationByName();
          props_BHTMarker = cpb.create();
        }
        return props_BHTMarker;
      case LanguageConceptSwitch.BHTMindMap:
        if (props_BHTMindMap == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("mindmap concept can have multiple levels of topics and can in clude a potential marker for each topic");
          cpb.presentationByName();
          props_BHTMindMap = cpb.create();
        }
        return props_BHTMindMap;
      case LanguageConceptSwitch.BHTRootTopic:
        if (props_BHTRootTopic == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("central root topic of the mindmap can have multiple main topics");
          cpb.presentationByName();
          props_BHTRootTopic = cpb.create();
        }
        return props_BHTRootTopic;
      case LanguageConceptSwitch.BHTSubTopic:
        if (props_BHTSubTopic == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("many sub topics can be children of a main topic");
          cpb.presentationByName();
          props_BHTSubTopic = cpb.create();
        }
        return props_BHTSubTopic;
      case LanguageConceptSwitch.BHTTopic:
        if (props_BHTTopic == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("topic that all other types of topics derive from");
          props_BHTTopic = cpb.create();
        }
        return props_BHTTopic;
    }
    return null;
  }
}
