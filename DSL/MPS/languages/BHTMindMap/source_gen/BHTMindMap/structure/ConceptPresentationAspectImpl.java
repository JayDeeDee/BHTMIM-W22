package BHTMindMap.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_BHTIdea;
  private ConceptPresentation props_BHTLabel;
  private ConceptPresentation props_BHTMainIdea;
  private ConceptPresentation props_BHTMindMap;
  private ConceptPresentation props_BHTRootIdea;
  private ConceptPresentation props_BHTSubIdea;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.BHTIdea:
        if (props_BHTIdea == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("an abstract idea is a topic or node in the mindmap that all other types of ideas derive from");
          props_BHTIdea = cpb.create();
        }
        return props_BHTIdea;
      case LanguageConceptSwitch.BHTLabel:
        if (props_BHTLabel == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("potential label for each idea can be used for sorting the mindmap chaos (levels etc)");
          cpb.presentationByName();
          props_BHTLabel = cpb.create();
        }
        return props_BHTLabel;
      case LanguageConceptSwitch.BHTMainIdea:
        if (props_BHTMainIdea == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("main idea is first level node after the root idea");
          cpb.presentationByName();
          props_BHTMainIdea = cpb.create();
        }
        return props_BHTMainIdea;
      case LanguageConceptSwitch.BHTMindMap:
        if (props_BHTMindMap == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("mindmap can have an central root idea which has multiple levels of ideas");
          cpb.presentationByName();
          props_BHTMindMap = cpb.create();
        }
        return props_BHTMindMap;
      case LanguageConceptSwitch.BHTRootIdea:
        if (props_BHTRootIdea == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("central idea root node of the mindmap can have several main ideas");
          cpb.presentationByName();
          props_BHTRootIdea = cpb.create();
        }
        return props_BHTRootIdea;
      case LanguageConceptSwitch.BHTSubIdea:
        if (props_BHTSubIdea == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("sub idea can have several sub ideas");
          cpb.presentationByName();
          props_BHTSubIdea = cpb.create();
        }
        return props_BHTSubIdea;
    }
    return null;
  }
}
